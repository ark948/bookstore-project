Project description:

Create a simple e-commerce website for a booksotre.
Must include:
    - user registration (email verification is not required, only for special cases, such as reminder when a book is available)
    - login with phone number and OTP
    - payment gateway
    - shopping cart
    - reviews and comments or rating
    - admin panel (adding new books and managing users)
    - contact form for users
    - book request for users
    - invoice exporting
    - order tracking
    - internationalization (only en and fa)

    NOTE: Language must be farsi first

Add docker, nginx, gunicorn
Postgresql or MySQL database and backup (extra points if backups are automated)


1. setup
2. added home app, and updated templates dir, added base and home index.html
3. added accounts app
4. custom user model 
    (do it before migrations) 
    (login with phone number OTP is REQUIRED, mock SMS provider if necessary)
    (upate AUTH_USER_MODEL in settings.py, otherwise errors will be raised)
    (login with both otp and password must be allowed (provide choice to user)) (later...)
5. running migrations (after creating custom user model with phone number)
6. adding tailwindcss (with flowbite or daisyui later)
    process help:
    - create a static folder next to manage.py
    - inside it add a src folder, then inside src folder, add a style.css (or you can name it input.css)
    - add STATICFILES_DIRS = [ BASE_DIR / "static" ] to settings.py
    - one level above manage.py, run the following command (node and npm are required):
    (use node -v and npm -v to check if they are installed)
    > npm install tailwindcss @tailwindcss/cli
    - add @import "tailwindcss"; to static/src/style.css
    - add watch:css script to package.json:
        "scripts": {
            "watch:css": "npx @tailwindcss/cli -i ./backend/static/src/input.css -o ./backend/static/dist/output.css --watch"
        }
    - notice the input css file and the output css file (this command will give us a compiled css file)
    - add {% load static %} and <link rel="stylesheet" href="{% static 'dist/output.css' %}"> to head tag of _base.html template
    - with terminal on the same level as package.json run the watch:css command:
    > npm run watch:css
    - and with another terminal on same level as manage.py, run the django dev server
    (add some test tailwind clasess to one of the elements in index.html)
    - you should be able to see the result.
    (deploying to production comes later)
7. adding custom user to admin panel and adding a superuser
admin
admin@site.com
123
8. adding htmx
django-htmx package can be used + the regular way of downloading a copy of htmx.js
    1. > pip install django-htmx
    2. add "django_htmx" to installed_apps
    3. add "django_htmx.middleware.HtmxMiddleware", to middlewares
    4. download htmx.min.js from official source, put it in static/js folder
    5. in _base.html, add to the head tag: <script src="{% static 'js/htmx.min.js' %}" defer></script>
    6. Optionally update the body tag to capture CSRF token
    (this process must be updated for production)
9. adding singup:
    1. add a simple signup form to forms.py file in accounts app



stuff to add:
(i keep these things here so that i don't forget them)
django-debug-toolbar
django-browser-reload
htmx
daisyui or flowbite
pytest
django-pytest
authentication with htmx and modals