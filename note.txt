Project description:

Create a simple e-commerce website for a booksotre.
Must include:
    - user registration (email verification is not required, only for special cases, such as reminder when a book is available)
    - login with phone number and OTP
    - payment gateway
    - shopping cart
    - reviews and comments or rating
    - admin panel (adding new books and managing users)
    - contact form for users
    - book request for users
    - invoice exporting
    - order tracking
    - internationalization (only en and fa)

    NOTE: Language must be farsi first
    NOTE: Comment should just be a short opinion
    NOTE: Review should be more comprehensive
    bonus feature: if a user's review get for example 20 upvotes, that user should get an small discount
    (upvotes must be from verified users)

Add docker, nginx, gunicorn
Postgresql or MySQL database and backup (extra points if backups are automated)


1. setup
2. added home app, and updated templates dir, added base and home index.html
3. added accounts app
4. custom user model  (IMPORTANT, this had some issues, refer to #14)
    (do it before migrations) 
    (login with phone number OTP is REQUIRED, mock SMS provider if necessary)
    (upate AUTH_USER_MODEL in settings.py, otherwise errors will be raised)
    (login with both otp and password must be allowed (provide choice to user)) (later...)
5. running migrations (after creating custom user model with phone number)
6. adding tailwindcss (with flowbite or daisyui later) (using tailwindcss cli is the only way to go)
    process help:
    - create a static folder next to manage.py
    - inside it add a src folder, then inside src folder, add a style.css (or you can name it input.css)
    - add STATICFILES_DIRS = [ BASE_DIR / "static" ] to settings.py
    - one level above manage.py, run the following command (node and npm are required):
    (use node -v and npm -v to check if they are installed)
    > npm install tailwindcss @tailwindcss/cli
    - add @import "tailwindcss"; to static/src/style.css
    - add watch:css script to package.json:
        "scripts": {
            "watch:css": "npx @tailwindcss/cli -i ./backend/static/src/input.css -o ./backend/static/dist/output.css --watch"
        }
    - notice the input css file and the output css file (this command will give us a compiled css file)
    - add {% load static %} and <link rel="stylesheet" href="{% static 'dist/output.css' %}"> to head tag of _base.html template
    - with terminal on the same level as package.json run the watch:css command:
    > npm run watch:css
    - and with another terminal on same level as manage.py, run the django dev server
    (add some test tailwind clasess to one of the elements in index.html)
    - you should be able to see the result.
    (deploying to production comes later)
7. adding custom user to admin panel and adding a superuser
admin
admin@site.com
123
09116355962
8. adding htmx
django-htmx package can be used + the regular way of downloading a copy of htmx.js
    1. > pip install django-htmx
    2. add "django_htmx" to installed_apps
    3. add "django_htmx.middleware.HtmxMiddleware", to middlewares
    4. download htmx.min.js from official source, put it in static/js folder
    5. in _base.html, add to the head tag: <script src="{% static 'js/htmx.min.js' %}" defer></script>
    6. Optionally update the body tag to capture CSRF token
    (this process must be updated for production)
9. adding singup:
    1. add a simple signup form to forms.py file in accounts app

10. adding flowbite
    > pip install django-compressor, add 'compressor', to installed_apps (skipped)
    1. configure the compressor inside settings.py (skipped)
    (it appears that these instructions may be for production or another way of installing tailwind, which i had my own, so skipping for now)
    2. install Flowbite as a dependency using NPM
    > npm install flowbite --save
    3. import the default theme variables from Flowbite inside your main input.css CSS file:
    @import "flowbite/src/themes/default"; (add this to input.css)
    3. Import the Flowbite plugin file in your CSS:
    @plugin "flowbite/plugin";
    4. Configure the source files of Flowbite in your CSS:
    @source "../../node_modules/flowbite";
    5. add flowbite js file to base template (at the end of the body tag):
    <script src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"></script>

11. Problem: Modifying html attributes of forms in forms.py leads to messy code,
    let's use django-widget-tweaks to modify them in html files,
    ALSO, flowbite is not working (fixed after tidying up)
    Adding django-widget-tweaks
    > pip install django-widget-tweaks
    1. add 'widget_tweaks', to installed_apps
    2. add {% load widget_tweaks %} to templates (the ones with direct use)
    3. start modifying form fields as needed

12. The visual on signup form looks ok (definitly not enough for production) but for now, we'll move onto functionality.
    1. signup functionality is ok, needs cleaning, form validation, feedbacks and...

13. adding tests
    (we will be needing pytest, pytest-django, and factory-boy)
    pytest-django
    > pip install pytest-django
    1. add pytest.ini to backend folder, next to manage.py
    2. next, we need to use factory-boy to generate some dummy data to test with,
    add factories.py to accounts

14. PROBLEM: Signing up users, unique constraint failed for username

    different approaches:
    - Email and Username (not popular anymore)
    - Email Only (ok) (done)
    - Phone Number Only (ok and better)
    - Email or Phone Number (best)

    applied migrations, need to test (still has problems)
    (authentication must be done with either email or phone_number, since this is a bookstore project, email should optional)

    Alright, after some research... I think i may have figured it out.
    first AbstractUser is is like a more pre-made model, it already has some fields + authentication mechanism ans some default constraints.
    we can use this if we just want to add some functionality on top of it.
    email only authentication can be achieved by this model, BUT (IMPORTANT) keep in mind that adding email = EmailField(unique=True)...
    to cusotm user model is not enough, username = None must also be added.
    AbstractBaseUser has no fields or default constraints, and makes much less assumptions about our project. it only has authentication mechanism.
    We can use this if want a more customized project. But we must add all of the fields ourselves, such as first_name and last_name.

    - I will add both of them here, BUT (IMPORTANT) only set AbstractUser as AUTH_USER_MODEL. (the other one will be just for demonstration purposes)
    (actually this cannot be allowed so i commented it out)
    - And later we will use attempt to utilize Django AllAuth package

    1. after adding custom user model
    2. add custom user manager
    3. make and run migrations
    4. add model to admin
    5. add forms
    VERY IMPORTANT: Make sure to check if groups and permissions are ok for users in admin panel (in both user view, and new user window).
    6. check admin panel for everything about custom user
    7. nex comes signup functionality. add backends.py to accounts
    (but first, let's check if current forms are able to sign users up without specifying a custom authentication backend)
    8. the default authentication form (from django.contrib.auth.forms) will not display the eamil form
    (i tried to modify it, but it is showing errors that is beyond me, "user is inactive")
    9. it appears that there is no other way that specifying a cusotm authentication backend
    10. add the custom backend to AUTHENTICATION_BACKENDS in settings.py (this config variable may not be visible by default)
    11. VERY IMPORTANT, make sure the name of the login view is not as same as the django's login function

    - now we can try adding phone number login
    1. let's start by adding phone_number field to model
    I'll complete this later...

    New superuser:
    admin@site.com
    123

15. Configuring image upload for Book Image Cover
    1. add MEDIA_ROOT and MEDIA_URL to settings.py
    2. configure urls for serving media files
    3. add upload_to to ImageField of BookModel
    4. i think we're supposed to add a media folder next to manage.py
    5. form is needed
    6. html template is needed
    7. add a view, which will save the form if valid and request is POST
    8. add url

16. page_count fields on shop models, should be properties
    - Attempting to implement using model managers and custom queries
    - Book submission is broken, authors cannot be removed from Authors.


stuff to add:
(i keep these things here so that i don't forget them)
django-debug-toolbar
django-browser-reload
htmx
daisyui or flowbite
pytest
django-pytest
authentication with htmx and modals